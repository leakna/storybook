"use strict";(self.webpackChunk_11_next=self.webpackChunk_11_next||[]).push([[664],{"./src/app/component/login/loginForm.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,default:()=>loginForm_stories,loginEmailFormat:()=>loginEmailFormat,loginError:()=>loginError,loginLimitFormat:()=>loginLimitFormat,loginRequire:()=>loginRequire,loginSuccess:()=>loginSuccess});var http=__webpack_require__("./node_modules/msw/lib/core/http.mjs"),HttpResponse=__webpack_require__("./node_modules/msw/lib/core/HttpResponse.mjs"),delay=__webpack_require__("./node_modules/msw/lib/core/delay.mjs"),dist=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs"),jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),index_esm=__webpack_require__("./node_modules/react-hook-form/dist/index.esm.mjs"),yup=__webpack_require__("./node_modules/@hookform/resolvers/yup/dist/yup.mjs"),yup_index_esm=__webpack_require__("./node_modules/yup/index.esm.js"),console=__webpack_require__("./node_modules/console-browserify/index.js");function cov_16caae63we(){var path="D:\\sabaicode\\code\\exercise\\11.next\\src\\app\\component\\login\\loginForm.tsx",global=new Function("return this")(),gcv="__coverage__",coverage=global[gcv]||(global[gcv]={});coverage[path]&&"522faf37973e5d7edbccf3cb6c3dcf167368fed4"===coverage[path].hash||(coverage[path]={path:"D:\\sabaicode\\code\\exercise\\11.next\\src\\app\\component\\login\\loginForm.tsx",statementMap:{0:{start:{line:7,column:15},end:{line:10,column:13}},1:{start:{line:11,column:15},end:{line:108,column:1}},2:{start:{line:13,column:69},end:{line:15,column:6}},3:{start:{line:16,column:36},end:{line:16,column:51}},4:{start:{line:17,column:36},end:{line:17,column:51}},5:{start:{line:18,column:44},end:{line:18,column:58}},6:{start:{line:20,column:26},end:{line:32,column:5}},7:{start:{line:21,column:8},end:{line:31,column:9}},8:{start:{line:23,column:29},end:{line:23,column:74}},9:{start:{line:24,column:26},end:{line:24,column:47}},10:{start:{line:26,column:25},end:{line:26,column:95}},11:{start:{line:26,column:44},end:{line:26,column:94}},12:{start:{line:27,column:12},end:{line:27,column:24}},13:{start:{line:29,column:12},end:{line:29,column:62}},14:{start:{line:30,column:12},end:{line:30,column:24}},15:{start:{line:34,column:21},end:{line:48,column:5}},16:{start:{line:35,column:8},end:{line:35,column:25}},17:{start:{line:36,column:8},end:{line:36,column:30}},18:{start:{line:38,column:21},end:{line:38,column:67}},19:{start:{line:39,column:8},end:{line:46,column:9}},20:{start:{line:41,column:12},end:{line:41,column:29}},21:{start:{line:44,column:12},end:{line:44,column:57}},22:{start:{line:45,column:12},end:{line:45,column:30}},23:{start:{line:47,column:8},end:{line:47,column:26}},24:{start:{line:49,column:4},end:{line:107,column:7}},25:{start:{line:110,column:0},end:{line:114,column:2}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:11,column:15},end:{line:11,column:16}},loc:{start:{line:11,column:19},end:{line:108,column:1}},line:11},1:{name:"(anonymous_1)",decl:{start:{line:20,column:26},end:{line:20,column:27}},loc:{start:{line:20,column:51},end:{line:32,column:5}},line:20},2:{name:"(anonymous_2)",decl:{start:{line:26,column:36},end:{line:26,column:37}},loc:{start:{line:26,column:44},end:{line:26,column:94}},line:26},3:{name:"(anonymous_3)",decl:{start:{line:34,column:21},end:{line:34,column:22}},loc:{start:{line:34,column:35},end:{line:48,column:5}},line:34}},branchMap:{0:{loc:{start:{line:26,column:44},end:{line:26,column:94}},type:"binary-expr",locations:[{start:{line:26,column:44},end:{line:26,column:64}},{start:{line:26,column:68},end:{line:26,column:94}}],line:26},1:{loc:{start:{line:39,column:8},end:{line:46,column:9}},type:"if",locations:[{start:{line:39,column:8},end:{line:46,column:9}},{start:{line:42,column:15},end:{line:46,column:9}}],line:39},2:{loc:{start:{line:62,column:24},end:{line:65,column:26}},type:"binary-expr",locations:[{start:{line:62,column:24},end:{line:62,column:36}},{start:{line:62,column:54},end:{line:65,column:26}}],line:62},3:{loc:{start:{line:80,column:24},end:{line:83,column:26}},type:"binary-expr",locations:[{start:{line:80,column:24},end:{line:80,column:39}},{start:{line:80,column:57},end:{line:83,column:26}}],line:80},4:{loc:{start:{line:97,column:16},end:{line:100,column:18}},type:"binary-expr",locations:[{start:{line:97,column:16},end:{line:97,column:25}},{start:{line:97,column:43},end:{line:100,column:18}}],line:97},5:{loc:{start:{line:101,column:16},end:{line:104,column:18}},type:"binary-expr",locations:[{start:{line:101,column:16},end:{line:101,column:28}},{start:{line:101,column:46},end:{line:104,column:18}}],line:101}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0},f:{0:0,1:0,2:0,3:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0]},inputSourceMap:{version:3,sources:["D:/sabaicode/code/exercise/11.next/src/app/component/login/loginForm.tsx"],sourcesContent:['import { useState } from "react";\r\nimport { useForm } from "react-hook-form";\r\nimport { yupResolver } from "@hookform/resolvers/yup";\r\nimport * as yup from "yup";\r\n\r\n// Define validation schema with yup\r\nconst schema = yup\r\n  .object({\r\n    email: yup.string().required("Email is required").email("Invalid format"),\r\n    password: yup\r\n      .string()\r\n      .required("Password is required")\r\n      .min(8, "Password must be at least 8 characters long"),\r\n  })\r\n  .required();\r\n\r\nconst SignIn = () => {\r\n  // Set up form handling\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  const [isSuccess, setSuccess] = useState<boolean>(false);\r\n  const [isDisable, setDisable] = useState<boolean>(false);\r\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\r\n\r\n  // Asynchronous function to fetch and compare data\r\n  const fetchUserData = async (email: string, password: string) => {\r\n    try {\r\n      // Fetch from Next.js API route\r\n      const response = await fetch("https://your-restful-endpoint/");\r\n      const users = await response.json();\r\n\r\n      // Compare with fetched data\r\n      const user = users.find(\r\n        (user: any) => user.email === email && user.password === password\r\n      );\r\n\r\n      return user;\r\n    } catch (error) {\r\n      console.error("Error fetching user data:", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Handle form submission\r\n  const onSubmit = async (data: any) => {\r\n    setDisable(true);\r\n    setErrorMessage(null);\r\n\r\n    // Fetch and compare user data\r\n    const user = await fetchUserData(data.email, data.password);\r\n\r\n    if (user) {\r\n      // If user data matches\r\n      setSuccess(true);\r\n    } else {\r\n      // If user data does not match\r\n      setErrorMessage("Invalid email or password");\r\n      setSuccess(false);\r\n    }\r\n\r\n    setDisable(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <h1>Signup</h1>\r\n        <div className="my-2 text-left">\r\n          <p>Email</p>\r\n          {errors.email && (\r\n            <p className="text-red-500">{errors.email.message}</p>\r\n          )}\r\n          <input\r\n            className="w-80 text-black"\r\n            type="email"\r\n            {...register("email")}\r\n            data-testid="email"\r\n            \r\n          />\r\n        </div>\r\n        <div className="my-2 text-left">\r\n          <p>Password</p>\r\n          {errors.password && (\r\n            <p className="text-red-500">{errors.password.message}</p>\r\n          )}\r\n          <input\r\n            className="w-80 text-black"\r\n            type="password"\r\n            {...register("password")}\r\n            data-testid="password"\r\n          />\r\n        </div>\r\n        <button type="submit" disabled={isDisable}>\r\n          Signup\r\n        </button>\r\n        {isSuccess && <p className="text-green-500">SignIn Success</p>}\r\n        {errorMessage && <p className="text-red-500">SignIn Unsuccessful</p>}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n'],names:["useState","useForm","yupResolver","yup","schema","object","email","string","required","password","min","SignIn","register","handleSubmit","formState","errors","reset","resolver","isSuccess","setSuccess","isDisable","setDisable","errorMessage","setErrorMessage","fetchUserData","response","fetch","users","json","user","find","error","console","onSubmit","data","div","form","h1","className","p","message","input","type","data-testid","button","disabled"],mappings:";AAAA,SAASA,QAAQ,QAAQ,QAAQ;AACjC,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,WAAW,QAAQ,0BAA0B;AACtD,YAAYC,SAAS,MAAM;AAE3B,oCAAoC;AACpC,MAAMC,SAASD,IACZE,MAAM,CAAC;IACNC,OAAOH,IAAII,MAAM,GAAGC,QAAQ,CAAC,qBAAqBF,KAAK,CAAC;IACxDG,UAAUN,IACPI,MAAM,GACNC,QAAQ,CAAC,wBACTE,GAAG,CAAC,GAAG;AACZ,GACCF,QAAQ;AAEX,MAAMG,SAAS;IACb,uBAAuB;IACvB,MAAM,EACJC,QAAQ,EACRC,YAAY,EACZC,WAAW,EAAEC,MAAM,EAAE,EACrBC,KAAK,EACN,GAAGf,QAAQ;QACVgB,UAAUf,YAAYE;IACxB;IAEA,MAAM,CAACc,WAAWC,WAAW,GAAGnB,SAAkB;IAClD,MAAM,CAACoB,WAAWC,WAAW,GAAGrB,SAAkB;IAClD,MAAM,CAACsB,cAAcC,gBAAgB,GAAGvB,SAAwB;IAEhE,kDAAkD;IAClD,MAAMwB,gBAAgB,OAAOlB,OAAeG;QAC1C,IAAI;YACF,+BAA+B;YAC/B,MAAMgB,WAAW,MAAMC,MAAM;YAC7B,MAAMC,QAAQ,MAAMF,SAASG,IAAI;YAEjC,4BAA4B;YAC5B,MAAMC,OAAOF,MAAMG,IAAI,CACrB,CAACD,OAAcA,KAAKvB,KAAK,KAAKA,SAASuB,KAAKpB,QAAQ,KAAKA;YAG3D,OAAOoB;QACT,EAAE,OAAOE,OAAO;YACdC,QAAQD,KAAK,CAAC,6BAA6BA;YAC3C,OAAO;QACT;IACF;IAEA,yBAAyB;IACzB,MAAME,WAAW,OAAOC;QACtBb,WAAW;QACXE,gBAAgB;QAEhB,8BAA8B;QAC9B,MAAMM,OAAO,MAAML,cAAcU,KAAK5B,KAAK,EAAE4B,KAAKzB,QAAQ;QAE1D,IAAIoB,MAAM;YACR,uBAAuB;YACvBV,WAAW;QACb,OAAO;YACL,8BAA8B;YAC9BI,gBAAgB;YAChBJ,WAAW;QACb;QAEAE,WAAW;IACb;IAEA,qBACE,KAACc;kBACC,cAAA,MAACC;YAAKH,UAAUpB,aAAaoB;;8BAC3B,KAACI;8BAAG;;8BACJ,MAACF;oBAAIG,WAAU;;sCACb,KAACC;sCAAE;;wBACFxB,OAAOT,KAAK,kBACX,KAACiC;4BAAED,WAAU;sCAAgBvB,OAAOT,KAAK,CAACkC,OAAO;;sCAEnD,KAACC;4BACCH,WAAU;4BACVI,MAAK;4BACJ,GAAG9B,SAAS,QAAQ;4BACrB+B,eAAY;;;;8BAIhB,MAACR;oBAAIG,WAAU;;sCACb,KAACC;sCAAE;;wBACFxB,OAAON,QAAQ,kBACd,KAAC8B;4BAAED,WAAU;sCAAgBvB,OAAON,QAAQ,CAAC+B,OAAO;;sCAEtD,KAACC;4BACCH,WAAU;4BACVI,MAAK;4BACJ,GAAG9B,SAAS,WAAW;4BACxB+B,eAAY;;;;8BAGhB,KAACC;oBAAOF,MAAK;oBAASG,UAAUzB;8BAAW;;gBAG1CF,2BAAa,KAACqB;oBAAED,WAAU;8BAAiB;;gBAC3ChB,8BAAgB,KAACiB;oBAAED,WAAU;8BAAe;;;;;AAIrD;AAEA,eAAe3B,OAAO"},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"522faf37973e5d7edbccf3cb6c3dcf167368fed4"});var actualCoverage=coverage[path];return cov_16caae63we=function(){return actualCoverage},actualCoverage}cov_16caae63we();const schema=(cov_16caae63we().s[0]++,yup_index_esm.Ik({email:yup_index_esm.Yj().required("Email is required").email("Invalid format"),password:yup_index_esm.Yj().required("Password is required").min(8,"Password must be at least 8 characters long")}).required());cov_16caae63we().s[1]++;const SignIn=()=>{cov_16caae63we().f[0]++;const{register,handleSubmit,formState:{errors},reset}=(cov_16caae63we().s[2]++,(0,index_esm.mN)({resolver:(0,yup.t)(schema)})),[isSuccess,setSuccess]=(cov_16caae63we().s[3]++,(0,react.useState)(!1)),[isDisable,setDisable]=(cov_16caae63we().s[4]++,(0,react.useState)(!1)),[errorMessage,setErrorMessage]=(cov_16caae63we().s[5]++,(0,react.useState)(null));cov_16caae63we().s[6]++;cov_16caae63we().s[15]++;return cov_16caae63we().s[24]++,(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsxs)("form",{onSubmit:handleSubmit((async data=>{cov_16caae63we().f[3]++,cov_16caae63we().s[16]++,setDisable(!0),cov_16caae63we().s[17]++,setErrorMessage(null);const user=(cov_16caae63we().s[18]++,await(async(email,password)=>{cov_16caae63we().f[1]++,cov_16caae63we().s[7]++;try{const response=(cov_16caae63we().s[8]++,await fetch("https://your-restful-endpoint/")),users=(cov_16caae63we().s[9]++,await response.json()),user=(cov_16caae63we().s[10]++,users.find((user=>(cov_16caae63we().f[2]++,cov_16caae63we().s[11]++,cov_16caae63we().b[0][0]++,user.email===email&&(cov_16caae63we().b[0][1]++,user.password===password)))));return cov_16caae63we().s[12]++,user}catch(error){return cov_16caae63we().s[13]++,console.error("Error fetching user data:",error),cov_16caae63we().s[14]++,null}})(data.email,data.password));cov_16caae63we().s[19]++,user?(cov_16caae63we().b[1][0]++,cov_16caae63we().s[20]++,setSuccess(!0)):(cov_16caae63we().b[1][1]++,cov_16caae63we().s[21]++,setErrorMessage("Invalid email or password"),cov_16caae63we().s[22]++,setSuccess(!1)),cov_16caae63we().s[23]++,setDisable(!1)})),children:[(0,jsx_runtime.jsx)("h1",{children:"Signup"}),(0,jsx_runtime.jsxs)("div",{className:"my-2 text-left",children:[(0,jsx_runtime.jsx)("p",{children:"Email"}),(cov_16caae63we().b[2][0]++,errors.email&&(cov_16caae63we().b[2][1]++,(0,jsx_runtime.jsx)("p",{className:"text-red-500",children:errors.email.message}))),(0,jsx_runtime.jsx)("input",{className:"w-80 text-black",type:"email",...register("email"),"data-testid":"email"})]}),(0,jsx_runtime.jsxs)("div",{className:"my-2 text-left",children:[(0,jsx_runtime.jsx)("p",{children:"Password"}),(cov_16caae63we().b[3][0]++,errors.password&&(cov_16caae63we().b[3][1]++,(0,jsx_runtime.jsx)("p",{className:"text-red-500",children:errors.password.message}))),(0,jsx_runtime.jsx)("input",{className:"w-80 text-black",type:"password",...register("password"),"data-testid":"password"})]}),(0,jsx_runtime.jsx)("button",{type:"submit",disabled:isDisable,children:"Signup"}),(cov_16caae63we().b[4][0]++,isSuccess&&(cov_16caae63we().b[4][1]++,(0,jsx_runtime.jsx)("p",{className:"text-green-500",children:"SignIn Success"}))),(cov_16caae63we().b[5][0]++,errorMessage&&(cov_16caae63we().b[5][1]++,(0,jsx_runtime.jsx)("p",{className:"text-red-500",children:"SignIn Unsuccessful"})))]})})},loginForm=SignIn;cov_16caae63we().s[25]++,SignIn.__docgenInfo={description:"",methods:[],displayName:"SignIn"};const loginForm_stories={title:"request/signin",component:loginForm},TestData=[{email:"leakna@gmail.com",password:"12345678"},{email:"test@gmail.com",password:"654321"}],loginSuccess={parameters:{msw:{handlers:[http.L.get("https://your-restful-endpoint/",(()=>HttpResponse.c.json(TestData)))]}},play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement);await dist.Q4.type(canvas.getByTestId("email"),"leakna@gmail.com"),await dist.Q4.type(canvas.getByTestId("password"),"12345678"),await dist.Q4.click(canvas.getByRole("button")),await(0,dist.fm)((()=>{(0,dist.E3)(canvas.queryByText("SignIn Success")).toBeInTheDocument()}))}},loginRequire={parameters:{msw:{handlers:[http.L.get("https://your-restful-endpoint/",(async()=>(await(0,delay.cb)(800),new HttpResponse.c(null,{status:403}))))]}},play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement);await dist.Q4.clear(canvas.getByTestId("email")),await dist.Q4.clear(canvas.getByTestId("password")),await dist.Q4.click(canvas.getByRole("button")),await(0,dist.fm)((()=>{(0,dist.E3)(canvas.getByText("Password is required")).toBeInTheDocument(),(0,dist.E3)(canvas.getByText("Email is required")).toBeInTheDocument()}))}},loginEmailFormat={parameters:{msw:{handlers:[http.L.get("https://your-restful-endpoint/",(async()=>(await(0,delay.cb)(800),new HttpResponse.c(null,{status:403}))))]}},play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement);await dist.Q4.type(canvas.getByTestId("email"),"wrongemagmail"),await dist.Q4.type(canvas.getByTestId("password"),"password123"),await dist.Q4.click(canvas.getByRole("button")),await(0,dist.fm)((()=>{(0,dist.E3)(canvas.getByText("Invalid format")).toBeInTheDocument()}))}},loginLimitFormat={parameters:{msw:{handlers:[http.L.get("https://your-restful-endpoint/",(async()=>(await(0,delay.cb)(800),new HttpResponse.c(null,{status:403}))))]}},play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement);await dist.Q4.type(canvas.getByTestId("email"),"wrongema@gmail.com"),await dist.Q4.type(canvas.getByTestId("password"),"passwo3"),await dist.Q4.click(canvas.getByRole("button")),await(0,dist.fm)((()=>{(0,dist.E3)(canvas.getByText("Password must be at least 8 characters long")).toBeInTheDocument()}))}},loginError={parameters:{msw:{handlers:[http.L.get("https://your-restful-endpoint/",(async()=>(await(0,delay.cb)(800),new HttpResponse.c(null,{status:403}))))]}},play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement);await dist.Q4.type(canvas.getByTestId("email"),"wrongemail@gmail.com"),await dist.Q4.type(canvas.getByTestId("password"),"wrongpassword"),await dist.Q4.click(canvas.getByRole("button")),await(0,dist.fm)((()=>{(0,dist.E3)(canvas.getByText("SignIn Unsuccessful")).toBeInTheDocument()}))}},__namedExportsOrder=["loginSuccess","loginRequire","loginEmailFormat","loginLimitFormat","loginError"];loginSuccess.parameters={...loginSuccess.parameters,docs:{...loginSuccess.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    msw: {\n      handlers: [http.get("https://your-restful-endpoint/", () => {\n        return HttpResponse.json(TestData);\n      })]\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Simulate interactions with the component\n    await userEvent.type(canvas.getByTestId("email"), "leakna@gmail.com");\n    await userEvent.type(canvas.getByTestId("password"), "12345678");\n    await userEvent.click(canvas.getByRole("button"));\n\n    // Assert DOM structure for success message\n    await waitFor(() => {\n      expect(canvas.queryByText("SignIn Success")).toBeInTheDocument();\n    });\n  }\n}',...loginSuccess.parameters?.docs?.source}}},loginRequire.parameters={...loginRequire.parameters,docs:{...loginRequire.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    msw: {\n      handlers: [http.get("https://your-restful-endpoint/", async () => {\n        await delay(800);\n        return new HttpResponse(null, {\n          status: 403\n        });\n      })]\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Simulate interactions with the component\n    await userEvent.clear(canvas.getByTestId("email"));\n    await userEvent.clear(canvas.getByTestId("password"));\n    await userEvent.click(canvas.getByRole("button"));\n\n    // Assert DOM structure for error message\n    await waitFor(() => {\n      expect(canvas.getByText("Password is required")).toBeInTheDocument();\n      expect(canvas.getByText("Email is required")).toBeInTheDocument();\n    });\n  }\n}',...loginRequire.parameters?.docs?.source}}},loginEmailFormat.parameters={...loginEmailFormat.parameters,docs:{...loginEmailFormat.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    msw: {\n      handlers: [http.get("https://your-restful-endpoint/", async () => {\n        await delay(800);\n        return new HttpResponse(null, {\n          status: 403\n        });\n      })]\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Simulate interactions with the component\n    await userEvent.type(canvas.getByTestId("email"), "wrongemagmail"); // Invalid email format\n    await userEvent.type(canvas.getByTestId("password"), "password123");\n    await userEvent.click(canvas.getByRole("button"));\n\n    // Assert DOM structure for invalid email format error message\n    await waitFor(() => {\n      expect(canvas.getByText("Invalid format")).toBeInTheDocument();\n    });\n  }\n}',...loginEmailFormat.parameters?.docs?.source}}},loginLimitFormat.parameters={...loginLimitFormat.parameters,docs:{...loginLimitFormat.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    msw: {\n      handlers: [http.get("https://your-restful-endpoint/", async () => {\n        await delay(800);\n        return new HttpResponse(null, {\n          status: 403\n        });\n      })]\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Simulate interactions with the component\n    await userEvent.type(canvas.getByTestId("email"), "wrongema@gmail.com"); // Invalid email format\n    await userEvent.type(canvas.getByTestId("password"), "passwo3");\n    await userEvent.click(canvas.getByRole("button"));\n\n    // Assert DOM structure for invalid email format error message\n    await waitFor(() => {\n      expect(canvas.getByText("Password must be at least 8 characters long")).toBeInTheDocument();\n    });\n  }\n}',...loginLimitFormat.parameters?.docs?.source}}},loginError.parameters={...loginError.parameters,docs:{...loginError.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    msw: {\n      handlers: [http.get("https://your-restful-endpoint/", async () => {\n        await delay(800);\n        return new HttpResponse(null, {\n          status: 403\n        });\n      })]\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Simulate interactions with the component\n    await userEvent.type(canvas.getByTestId("email"), "wrongemail@gmail.com");\n    await userEvent.type(canvas.getByTestId("password"), "wrongpassword");\n    await userEvent.click(canvas.getByRole("button"));\n\n    // Assert DOM structure for error message\n    await waitFor(() => {\n      expect(canvas.getByText("SignIn Unsuccessful")).toBeInTheDocument();\n    });\n  }\n}',...loginError.parameters?.docs?.source}}}}}]);