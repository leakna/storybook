"use strict";(self.webpackChunk_11_next=self.webpackChunk_11_next||[]).push([[664],{"./src/app/component/login/loginForm.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,default:()=>loginForm_stories,loginEmailFormat:()=>loginEmailFormat,loginError:()=>loginError,loginLimitFormat:()=>loginLimitFormat,loginRequire:()=>loginRequire,loginSuccess:()=>loginSuccess});var http=__webpack_require__("./node_modules/msw/lib/core/http.mjs"),HttpResponse=__webpack_require__("./node_modules/msw/lib/core/HttpResponse.mjs"),delay=__webpack_require__("./node_modules/msw/lib/core/delay.mjs"),dist=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs"),jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),index_esm=__webpack_require__("./node_modules/react-hook-form/dist/index.esm.mjs"),yup=__webpack_require__("./node_modules/@hookform/resolvers/yup/dist/yup.mjs"),yup_index_esm=__webpack_require__("./node_modules/yup/index.esm.js"),console=__webpack_require__("./node_modules/console-browserify/index.js");const schema=yup_index_esm.Ik({email:yup_index_esm.Yj().required("Email is required").email("Invalid format"),password:yup_index_esm.Yj().required("Password is required").min(8,"Password must be at least 8 characters long")}).required(),SignIn=()=>{const{register,handleSubmit,formState:{errors},reset}=(0,index_esm.mN)({resolver:(0,yup.t)(schema)}),[isSuccess,setSuccess]=(0,react.useState)(!1),[isDisable,setDisable]=(0,react.useState)(!1),[errorMessage,setErrorMessage]=(0,react.useState)(null);return(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsxs)("form",{onSubmit:handleSubmit((async data=>{setDisable(!0),setErrorMessage(null);await(async(email,password)=>{try{const response=await fetch("https://your-restful-endpoint/");return(await response.json()).find((user=>user.email===email&&user.password===password))}catch(error){return console.error("Error fetching user data:",error),null}})(data.email,data.password)?setSuccess(!0):(setErrorMessage("Invalid email or password"),setSuccess(!1)),setDisable(!1)})),children:[(0,jsx_runtime.jsx)("h1",{children:"Signup"}),(0,jsx_runtime.jsxs)("div",{className:"my-2 text-left",children:[(0,jsx_runtime.jsx)("p",{children:"Email"}),errors.email&&(0,jsx_runtime.jsx)("p",{className:"text-red-500",children:errors.email.message}),(0,jsx_runtime.jsx)("input",{className:"w-80 text-black",type:"email",...register("email"),"data-testid":"email"})]}),(0,jsx_runtime.jsxs)("div",{className:"my-2 text-left",children:[(0,jsx_runtime.jsx)("p",{children:"Password"}),errors.password&&(0,jsx_runtime.jsx)("p",{className:"text-red-500",children:errors.password.message}),(0,jsx_runtime.jsx)("input",{className:"w-80 text-black",type:"password",...register("password"),"data-testid":"password"})]}),(0,jsx_runtime.jsx)("button",{type:"submit",disabled:isDisable,children:"Signup"}),isSuccess&&(0,jsx_runtime.jsx)("p",{className:"text-green-500",children:"SignIn Success"}),errorMessage&&(0,jsx_runtime.jsx)("p",{className:"text-red-500",children:"SignIn Unsuccessful"})]})})},loginForm=SignIn;SignIn.__docgenInfo={description:"",methods:[],displayName:"SignIn"};const loginForm_stories={title:"request/signin",component:loginForm},TestData=[{email:"leakna@gmail.com",password:"12345678"},{email:"test@gmail.com",password:"654321"}],loginSuccess={parameters:{msw:{handlers:[http.L.get("https://your-restful-endpoint/",(()=>HttpResponse.c.json(TestData)))]}},play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement);await dist.Q4.type(canvas.getByTestId("email"),"leakna@gmail.com"),await dist.Q4.type(canvas.getByTestId("password"),"12345678"),await dist.Q4.click(canvas.getByRole("button")),await(0,dist.fm)((()=>{(0,dist.E3)(canvas.queryByText("SignIn Success")).toBeInTheDocument()}))}},loginRequire={parameters:{msw:{handlers:[http.L.get("https://your-restful-endpoint/",(async()=>(await(0,delay.cb)(800),new HttpResponse.c(null,{status:403}))))]}},play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement);await dist.Q4.clear(canvas.getByTestId("email")),await dist.Q4.clear(canvas.getByTestId("password")),await dist.Q4.click(canvas.getByRole("button")),await(0,dist.fm)((()=>{(0,dist.E3)(canvas.getByText("Password is required")).toBeInTheDocument(),(0,dist.E3)(canvas.getByText("Email is required")).toBeInTheDocument()}))}},loginEmailFormat={parameters:{msw:{handlers:[http.L.get("https://your-restful-endpoint/",(async()=>(await(0,delay.cb)(800),new HttpResponse.c(null,{status:403}))))]}},play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement);await dist.Q4.type(canvas.getByTestId("email"),"wrongemagmail"),await dist.Q4.type(canvas.getByTestId("password"),"password123"),await dist.Q4.click(canvas.getByRole("button")),await(0,dist.fm)((()=>{(0,dist.E3)(canvas.getByText("Invalid format")).toBeInTheDocument()}))}},loginLimitFormat={parameters:{msw:{handlers:[http.L.get("https://your-restful-endpoint/",(async()=>(await(0,delay.cb)(800),new HttpResponse.c(null,{status:403}))))]}},play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement);await dist.Q4.type(canvas.getByTestId("email"),"wrongema@gmail.com"),await dist.Q4.type(canvas.getByTestId("password"),"passwo3"),await dist.Q4.click(canvas.getByRole("button")),await(0,dist.fm)((()=>{(0,dist.E3)(canvas.getByText("Password must be at least 8 characters long")).toBeInTheDocument()}))}},loginError={parameters:{msw:{handlers:[http.L.get("https://your-restful-endpoint/",(async()=>(await(0,delay.cb)(800),new HttpResponse.c(null,{status:403}))))]}},play:async({canvasElement})=>{const canvas=(0,dist.ux)(canvasElement);await dist.Q4.type(canvas.getByTestId("email"),"wrongemail@gmail.com"),await dist.Q4.type(canvas.getByTestId("password"),"wrongpassword"),await dist.Q4.click(canvas.getByRole("button")),await(0,dist.fm)((()=>{(0,dist.E3)(canvas.getByText("SignIn Unsuccessful")).toBeInTheDocument()}))}},__namedExportsOrder=["loginSuccess","loginRequire","loginEmailFormat","loginLimitFormat","loginError"];loginSuccess.parameters={...loginSuccess.parameters,docs:{...loginSuccess.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    msw: {\n      handlers: [http.get("https://your-restful-endpoint/", () => {\n        return HttpResponse.json(TestData);\n      })]\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Simulate interactions with the component\n    await userEvent.type(canvas.getByTestId("email"), "leakna@gmail.com");\n    await userEvent.type(canvas.getByTestId("password"), "12345678");\n    await userEvent.click(canvas.getByRole("button"));\n\n    // Assert DOM structure for success message\n    await waitFor(() => {\n      expect(canvas.queryByText("SignIn Success")).toBeInTheDocument();\n    });\n  }\n}',...loginSuccess.parameters?.docs?.source}}},loginRequire.parameters={...loginRequire.parameters,docs:{...loginRequire.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    msw: {\n      handlers: [http.get("https://your-restful-endpoint/", async () => {\n        await delay(800);\n        return new HttpResponse(null, {\n          status: 403\n        });\n      })]\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Simulate interactions with the component\n    await userEvent.clear(canvas.getByTestId("email"));\n    await userEvent.clear(canvas.getByTestId("password"));\n    await userEvent.click(canvas.getByRole("button"));\n\n    // Assert DOM structure for error message\n    await waitFor(() => {\n      expect(canvas.getByText("Password is required")).toBeInTheDocument();\n      expect(canvas.getByText("Email is required")).toBeInTheDocument();\n    });\n  }\n}',...loginRequire.parameters?.docs?.source}}},loginEmailFormat.parameters={...loginEmailFormat.parameters,docs:{...loginEmailFormat.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    msw: {\n      handlers: [http.get("https://your-restful-endpoint/", async () => {\n        await delay(800);\n        return new HttpResponse(null, {\n          status: 403\n        });\n      })]\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Simulate interactions with the component\n    await userEvent.type(canvas.getByTestId("email"), "wrongemagmail"); // Invalid email format\n    await userEvent.type(canvas.getByTestId("password"), "password123");\n    await userEvent.click(canvas.getByRole("button"));\n\n    // Assert DOM structure for invalid email format error message\n    await waitFor(() => {\n      expect(canvas.getByText("Invalid format")).toBeInTheDocument();\n    });\n  }\n}',...loginEmailFormat.parameters?.docs?.source}}},loginLimitFormat.parameters={...loginLimitFormat.parameters,docs:{...loginLimitFormat.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    msw: {\n      handlers: [http.get("https://your-restful-endpoint/", async () => {\n        await delay(800);\n        return new HttpResponse(null, {\n          status: 403\n        });\n      })]\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Simulate interactions with the component\n    await userEvent.type(canvas.getByTestId("email"), "wrongema@gmail.com"); // Invalid email format\n    await userEvent.type(canvas.getByTestId("password"), "passwo3");\n    await userEvent.click(canvas.getByRole("button"));\n\n    // Assert DOM structure for invalid email format error message\n    await waitFor(() => {\n      expect(canvas.getByText("Password must be at least 8 characters long")).toBeInTheDocument();\n    });\n  }\n}',...loginLimitFormat.parameters?.docs?.source}}},loginError.parameters={...loginError.parameters,docs:{...loginError.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    msw: {\n      handlers: [http.get("https://your-restful-endpoint/", async () => {\n        await delay(800);\n        return new HttpResponse(null, {\n          status: 403\n        });\n      })]\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Simulate interactions with the component\n    await userEvent.type(canvas.getByTestId("email"), "wrongemail@gmail.com");\n    await userEvent.type(canvas.getByTestId("password"), "wrongpassword");\n    await userEvent.click(canvas.getByRole("button"));\n\n    // Assert DOM structure for error message\n    await waitFor(() => {\n      expect(canvas.getByText("SignIn Unsuccessful")).toBeInTheDocument();\n    });\n  }\n}',...loginError.parameters?.docs?.source}}}}}]);